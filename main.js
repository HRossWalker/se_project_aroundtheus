!function(){"use strict";var e=class{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this._id=e._id,this._likeStatus=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeDislike=i}_setEventListeners(){this._cardImageElement.addEventListener("click",(()=>this._handleImageClick(this))),this._likeIcon.addEventListener("click",(()=>this._handleLikeDislike(this._likeStatus,this._id))),this._trashIcon.addEventListener("click",(()=>{this._handleDeleteClick(this._id)}))}handleLikeIcon(){this._likeIcon.classList.toggle("card__like-button_active")}handleDeleteCard(){this._cardElement.remove()}_getTemplate(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement}getView(){return this._element=this._getTemplate(),this._cardTitleElement=this._cardElement.querySelector(".card__title"),this._cardTitleElement.textContent=this._name,this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._likeIcon=this._cardElement.querySelector(".card__like-button"),this._likeStatus&&this._likeIcon.classList.add("card__like-button_active"),this._trashIcon=this._cardElement.querySelector(".card__trash-button"),this._deleteModal=document.querySelector("modal__delete-modal_active"),this._setEventListeners(),this._element}},t=class{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formEl=t,this._inputList=[...this._formEl.querySelectorAll(this._inputSelector)],this._submitButton=this._formEl.querySelector(this._submitButtonSelector)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._inputEl=e,this._checkInputValidity(e),this._toggleButtonState()}))}))}_showInputError(){this._errorMessageEl=document.querySelector(`#${this._inputEl.id}-error`),this._errorMessageEl.textContent=this._inputEl.validationMessage,this._inputEl.classList.add(this._inputErrorClass),this._errorMessageEl.classList.add(this._errorClass)}_checkInputValidity(){if(!this._inputEl.validity.valid)return this._showInputError();this._hideInputError()}_hideInputError(){this._errorMessageEl=document.querySelector(`#${this._inputEl.id}-error`),this._errorMessageEl.textContent="",this._inputEl.classList.remove(this._inputErrorClass),this._errorMessageEl.classList.remove(this._errorClass)}_toggleButtonState(){this._hasInvalidInput(this._inputList)?this._enableButton(this._inactiveButtonClass):this._disableButton(this._inactiveButtonClass)}_hasInvalidInput(){return!this._inputList.every((e=>e.validity.valid))}_enableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_disableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._inputEl=e,this._hideInputError()}))}};const s=document.querySelector("#profile-edit-button"),r=document.querySelector("#modal-name-input"),i=document.querySelector("#modal-about-input"),a=document.querySelector(".profile__avatar-edit"),n=document.querySelector("#card-add-button"),o=document.querySelector(".cards__list"),l=document.querySelector("#modal-del-btn");var d=class{constructor(e){let{popupSelector:t}=e;this._modalEl=document.querySelector(t)}open(){this._modalEl.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEsc)}close(){this._modalEl.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEsc)}_handleEsc=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._modalEl.addEventListener("mousedown",(e=>{e.target.classList.contains("modal_opened")&&this.close(),e.target.classList.contains("modal__close")&&this.close()}))}},c=class extends d{constructor(e,t){super({popupSelector:e}),this._popupForm=this._modalEl.querySelector(".modal__form"),this._submitButton=this._modalEl.querySelector(".modal__save-button"),this._handleFormSubmit=t,this._list=[...this._popupForm.querySelectorAll(".modal__input")],this._submitButtonText=this._submitButton.textContent}close(){this._popupForm.reset(),super.close()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}_getInputValues(){const e={};return this._list.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this._popupForm.addEventListener("submit",(()=>{this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}},h=class{constructor(e,t,s){this._name=document.querySelector(e),this._about=document.querySelector(t),this._avatar=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,about:this._about.textContent}}setUserAvatar(e){this._avatar.src=e}setUserInfo(e){let{name:t,about:s,avatar:r}=e;t&&(this._name.textContent=t),s&&(this._about.textContent=s),r&&(this._avatar.src=r)}},u=class{constructor(e,t){let{data:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=t}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}};const _={};let m,p;var E;E={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__button-disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_visible"},Array.from(document.querySelectorAll(E.formSelector)).forEach((e=>{const s=new t(E,e),r=e.getAttribute("name");_[r]=s,s.enableValidation()}));const v=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers={authorization:`${e.authorization}`,"Content-Type":"application/json"}}getServerData(){return Promise.all([this.getUserData(),this.getInitialCards()])}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}getUserData(){return this._request(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers})}updateUserData(e){let{name:t,about:s}=e;return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:`${t}`,about:`${s}`})})}updateAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}getCards(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"GET",headers:this._headers})}createCard(e){let{name:t,link:s}=e;return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:`${t}`,link:`${s}`})})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}likeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers,body:JSON.stringify({isLiked:!0})})}disLikeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",authorization:"7dcd9a93-149c-4e56-87db-9285c9177a9e"});v.getServerData().then((e=>{let[t,s]=e;p=new h("#profile-name","#profile-about","#profile-avatar"),p.setUserInfo(t),m=new u({data:s,renderer:e=>{const t=b(e);m.addItem(t)}},o),m.renderItems()}));const b=t=>{const s=new e(t,"#card-template",(()=>{L.open(t)}),(()=>{k.open(s)}),((e,t)=>{e?v.disLikeCard(t).then((()=>s.handleLikeIcon())).catch((e=>console.error(`${e}, Failed to dislike card`))):v.likeCard(t).then((()=>s.handleLikeIcon())).catch((e=>console.error(`${e}, Failed to like card`)))}));return s.getView()},L=new class extends d{constructor(e){super({popupSelector:e}),this._popupImage=document.querySelector(".modal__picture-view"),this._popupTitle=document.querySelector(".modal__picture-heading")}open(e){let{name:t,link:s}=e;this._popupImage.src=s,this._popupImage.alt=t,this._popupTitle.textContent=t,super.open()}}("#card-picture-modal");L.setEventListeners();const S=new c("#profile-edit-modal",(function(e){S.renderLoading(!0),v.updateUserData(e).then((()=>{p.setUserInfo(e),S.close()})).catch((e=>console.error(`${e}, Failed to update Profile Info`))).finally((()=>{S.renderLoading(!1)}))}));S.setEventListeners();const g=new c("#card-add-modal",(function(e){g.renderLoading(!0),v.createCard(e).then((e=>{const t=b(e);m.addItem(t),g.close()})).catch((e=>console.error(`${e}, Failed to add Card`))).finally((()=>{g.renderLoading(!1)}))}));g.setEventListeners();const k=new class extends d{constructor(e,t){super({popupSelector:e}),this._handleDeleteConfirmation=t}open(e){super.open(),this._cardId=e._id,this._card=e}setEventListeners(){l.addEventListener("click",(()=>{this._handleDeleteConfirmation(this._card,this._cardId)})),super.setEventListeners()}}("#modal-delete",(function(e,t){v.deleteCard(t).then((()=>{e.handleDeleteCard(),k.close()})).catch((e=>console.error(`${e}, Failed to delete card`)))}));k.setEventListeners();const C=new c("#modal-avatar",(function(e){C.renderLoading(!0),v.updateAvatar(e.link).then((()=>{p.setUserAvatar(e.link),C.close()})).catch((e=>console.error(`${e}, Failed to update Avatar`))).finally((()=>{C.renderLoading(!1)}))}));C.setEventListeners(),s.addEventListener("click",(()=>{_.profileForm.resetValidation();const e=p.getUserInfo();r.value=e.name,i.value=e.about,S.open()})),n.addEventListener("click",(()=>{_.addCardForm.resetValidation(),g.open()})),a.addEventListener("click",(()=>{_.avatarUpdate.resetValidation(),C.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,