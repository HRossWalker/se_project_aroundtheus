!function(){"use strict";var e=class{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this._id=e._id,this._likeStatus=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeDislike=i}_setEventListeners(){this._cardImageElement.addEventListener("click",(()=>this._handleImageClick(this))),this._likeIcon.addEventListener("click",(()=>this._handleLikeDislike(this._likeStatus,this._id))),this._trashIcon.addEventListener("click",(()=>{this._handleDeleteClick(this._id)}))}handleLikeIcon(){this._likeIcon.classList.toggle("card__like-button_active")}handleDeleteCard(){this._cardElement.remove()}_getTemplate(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement}getView(){return this._element=this._getTemplate(),this._cardTitleElement=this._cardElement.querySelector(".card__title"),this._cardTitleElement.textContent=this._name,this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._likeIcon=this._cardElement.querySelector(".card__like-button"),this._likeStatus&&this._likeIcon.classList.add("card__like-button_active"),this._trashIcon=this._cardElement.querySelector(".card__trash-button"),this._deleteModal=document.querySelector("modal__delete-modal_active"),this._setEventListeners(),this._element}},t=class{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formEl=t,this._inputList=[...this._formEl.querySelectorAll(this._inputSelector)],this._submitButton=this._formEl.querySelector(this._submitButtonSelector)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._inputEl=e,this._checkInputValidity(e),this._toggleButtonState()}))}))}_showInputError(){this._errorMessageEl=document.querySelector(`#${this._inputEl.id}-error`),this._errorMessageEl.textContent=this._inputEl.validationMessage,this._inputEl.classList.add(this._inputErrorClass),this._errorMessageEl.classList.add(this._errorClass)}_checkInputValidity(){if(!this._inputEl.validity.valid)return this._showInputError();this._hideInputError()}_hideInputError(){this._errorMessageEl=document.querySelector(`#${this._inputEl.id}-error`),this._errorMessageEl.textContent="",this._inputEl.classList.remove(this._inputErrorClass),this._errorMessageEl.classList.remove(this._errorClass)}_toggleButtonState(){this._hasInvalidInput(this._inputList)?this._enableButton(this._inactiveButtonClass):this._disableButton(this._inactiveButtonClass)}_hasInvalidInput(){return!this._inputList.every((e=>e.validity.valid))}_enableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_disableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._inputEl=e,this._hideInputError()}))}};const s=document.querySelector("#profile-edit-button"),r=document.querySelector("#modal-name-input"),i=document.querySelector("#modal-about-input"),a=document.querySelector(".profile__avatar-edit"),n=document.querySelector("#card-add-button"),o=document.querySelector(".cards__list"),l=document.querySelector("#modal-del-btn");var d=class{constructor(e){let{popupSelector:t}=e;this._modalEl=document.querySelector(t)}open(){this._modalEl.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEsc)}close(){this._modalEl.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEsc)}_handleEsc=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._modalEl.addEventListener("mousedown",(e=>{e.target.classList.contains("modal_opened")&&this.close(),e.target.classList.contains("modal__close")&&this.close()}))}},c=class extends d{constructor(e,t){super({popupSelector:e}),this._popupForm=this._modalEl.querySelector(".modal__form"),this._submitButton=this._modalEl.querySelector(".modal__save-button"),this._handleFormSubmit=t,this._list=[...this._popupForm.querySelectorAll(".modal__input")]}setSave(){this._submitButton.textContent="Save"}close(){this._popupForm.reset(),super.close()}setLoading(e){e&&(this._submitButton.textContent="Saving...")}_getInputValues(){const e={};return this._list.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this._popupForm.addEventListener("submit",(()=>{this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}},h=class{constructor(e,t,s){this._name=document.querySelector(e),this._about=document.querySelector(t),this._avatar=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,about:this._about.textContent}}setUserAvatar(e){this._avatar.src=e}setUserInfo(e){let{name:t,about:s,avatar:r}=e;t&&(this._name.textContent=t),s&&(this._about.textContent=s),r&&(this._avatar.src=r)}},u=class{constructor(e,t){let{data:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=t}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}};const _={};let m,p;var E;E={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__button-disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_visible"},Array.from(document.querySelectorAll(E.formSelector)).forEach((e=>{const s=new t(E,e),r=e.getAttribute("name");_[r]=s,s.enableValidation()}));const v=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers={authorization:`${e.authorization}`,"Content-Type":"application/json"}}getServerData(){return Promise.all([this.getUserData(),this.getInitialCards()])}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}getUserData(){return this._request(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers})}updateUserData(e){let{name:t,about:s}=e;return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:`${t}`,about:`${s}`})})}updateAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}getCards(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"GET",headers:this._headers})}createCard(e){let{name:t,link:s}=e;return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:`${t}`,link:`${s}`})})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}likeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers,body:JSON.stringify({isLiked:!0})})}disLikeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",authorization:"7dcd9a93-149c-4e56-87db-9285c9177a9e"});v.getServerData().then((e=>{let[t,s]=e;p=new h("#profile-name","#profile-about","#profile-avatar"),p.setUserInfo(t),m=new u({data:s,renderer:e=>{const t=S(e);m.addItem(t)}},o),m.renderItems()}));const S=t=>{const s=new e(t,"#card-template",(()=>{b.open(t)}),(()=>{g.open(s)}),((e,t)=>{e?v.disLikeCard(t).then((()=>s.handleLikeIcon())).catch((e=>console.error(`${e}, Failed to dislike card`))):v.likeCard(t).then((()=>s.handleLikeIcon())).catch((e=>console.error(`${e}, Failed to like card`)))}));return s.getView()},b=new class extends d{constructor(e){super({popupSelector:e}),this._popupImage=document.querySelector(".modal__picture-view"),this._popupTitle=document.querySelector(".modal__picture-heading")}open(e){let{name:t,link:s}=e;this._popupImage.src=s,this._popupImage.alt=t,this._popupTitle.textContent=t,super.open()}}("#card-picture-modal");b.setEventListeners();const L=new c("#profile-edit-modal",(function(e){L.setLoading(!0),v.updateUserData(e).then((()=>{p.setUserInfo(e),L.close()})).catch((e=>console.error(`${e}, Failed to update Profile Info`))).finally((()=>{L.setSave()}))}));L.setEventListeners();const k=new c("#card-add-modal",(function(e){k.setLoading(!0),v.createCard(e).then((e=>{const t=S(e);m.addItem(t),k.close()})).catch((e=>console.error(`${e}, Failed to add Card`))).finally((()=>{k.setSave()}))}));k.setEventListeners();const g=new class extends d{constructor(e,t){super({popupSelector:e}),this._handleDeleteConfirmation=t}open(e){super.open(),this._cardId=e._id,this._card=e}setEventListeners(){l.addEventListener("click",(()=>{this._handleDeleteConfirmation(this._card,this._cardId)})),super.setEventListeners()}}("#modal-delete",(function(e,t){v.deleteCard(t).then((()=>{e.handleDeleteCard(),g.close()})).catch((e=>console.error(`${e}, Failed to delete card`)))}));g.setEventListeners();const C=new c("#modal-avatar",(function(e){C.setLoading(!0),v.updateAvatar(e.link).then((()=>{p.setUserAvatar(e.link),C.close()})).catch((e=>console.error(`${e}, Failed to update Avatar`))).finally((()=>{C.setSave()}))}));C.setEventListeners(),s.addEventListener("click",(()=>{_.profileForm.resetValidation();const e=p.getUserInfo();r.value=e.name,i.value=e.about,L.open()})),n.addEventListener("click",(()=>{_.addCardForm.resetValidation(),k.open()})),a.addEventListener("click",(()=>{_.avatarUpdate.resetValidation(),C.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVFyQixDQUNmLENBRUF2RixpQkFBQUEsR0FDRVQsRUFBd0JuRSxpQkFBaUIsU0FBUyxLQUNoRGQsS0FBS29NLDBCQUEwQnBNLEtBQUtzTSxNQUFPdE0sS0FBS3FNLFFBQVEsSUFFMUR0RyxNQUFNTCxtQkFDUixHSHlGQSxpQkFrQ0YsU0FBa0N1RixFQUFNcEgsR0FDdEM2RSxFQUNHc0IsV0FBV25HLEdBQ1g4RyxNQUFLLEtBQ0pNLEVBQUs3SixtQkFDTGdLLEVBQW1CN0YsT0FBTyxJQUUzQitGLE9BQU9DLEdBQVFDLFFBQVFDLE1BQU8sR0FBRUYsNkJBQ3JDLElBdkNBSCxFQUFtQjFGLG9CQUVuQixNQUFNNkcsRUFBYyxJQUFJVixFQUFjLGlCQW9FdEMsU0FBNEJwRixHQUMxQjhGLEVBQVlsRyxZQUFXLEdBQ3ZCcUMsRUFDR2tCLGFBQWFuRCxFQUFNckcsTUFDbkJ1SyxNQUFLLEtBQ0oxQyxFQUFnQmYsY0FBY1QsRUFBTXJHLE1BQ3BDbU0sRUFBWWhILE9BQU8sSUFFcEIrRixPQUFPQyxHQUFRQyxRQUFRQyxNQUFPLEdBQUVGLGdDQUNoQ1EsU0FBUSxLQUNQUSxFQUFZcEcsU0FBUyxHQUUzQixJQS9FQW9HLEVBQVk3RyxvQkFtRlpmLEVBQWtCN0QsaUJBQWlCLFNBQVMsS0FDMUNpSCxFQUE0QixZQUFFckQsa0JBQzlCLE1BQU0vRSxFQUFPc0ksRUFBZ0JqQixjQUM3QnBDLEVBQWlCOEIsTUFBUS9HLEVBQUtPLEtBQzlCMkUsRUFBa0I2QixNQUFRL0csRUFBS3NILE1BQy9CMkUsRUFBYXZHLE1BQU0sSUFHckJOLEVBQWNqRSxpQkFBaUIsU0FBUyxLQUN0Q2lILEVBQTRCLFlBQUVyRCxrQkFDOUJzSCxFQUFhM0csTUFBTSxJQUdyQlAsRUFBbUJoRSxpQkFBaUIsU0FBUyxLQUMzQ2lILEVBQTZCLGFBQUVyRCxrQkFDL0I2SCxFQUFZbEgsTUFBTSxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy91dGlscy91dGlscy5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cENvbmZpcm1hdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcGkgfSBmcm9tIFwiLi4vcGFnZXMvaW5kZXguanNcIjtcclxuaW1wb3J0IHsgZGVsZXRlQ29uZmlybVBvcHVwIH0gZnJvbSBcIi4uL3BhZ2VzL2luZGV4LmpzXCI7XHJcblxyXG5jbGFzcyBDYXJkIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGRhdGEsXHJcbiAgICBjYXJkU2VsZWN0b3IsXHJcbiAgICBoYW5kbGVJbWFnZUNsaWNrLFxyXG4gICAgaGFuZGxlRGVsZXRlQ2xpY2ssXHJcbiAgICBoYW5kbGVMaWtlRGlzbGlrZUNsaWNrXHJcbiAgKSB7XHJcbiAgICB0aGlzLl9uYW1lID0gZGF0YS5uYW1lO1xyXG4gICAgdGhpcy5fbGluayA9IGRhdGEubGluaztcclxuICAgIHRoaXMuX2lkID0gZGF0YS5faWQ7XHJcbiAgICB0aGlzLl9saWtlU3RhdHVzID0gZGF0YS5pc0xpa2VkO1xyXG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xyXG4gICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayA9IGhhbmRsZUltYWdlQ2xpY2s7XHJcbiAgICB0aGlzLl9oYW5kbGVEZWxldGVDbGljayA9IGhhbmRsZURlbGV0ZUNsaWNrO1xyXG4gICAgdGhpcy5faGFuZGxlTGlrZURpc2xpa2UgPSBoYW5kbGVMaWtlRGlzbGlrZUNsaWNrO1xyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fY2FyZEltYWdlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT5cclxuICAgICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayh0aGlzKVxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLl9saWtlSWNvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT5cclxuICAgICAgdGhpcy5faGFuZGxlTGlrZURpc2xpa2UodGhpcy5fbGlrZVN0YXR1cywgdGhpcy5faWQpXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuX3RyYXNoSWNvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVEZWxldGVDbGljayh0aGlzLl9pZCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUxpa2VJY29uKCkge1xyXG4gICAgdGhpcy5fbGlrZUljb24uY2xhc3NMaXN0LnRvZ2dsZShcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZURlbGV0ZUNhcmQoKSB7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5yZW1vdmUoKTtcclxuICAgIC8vIHRoaXMuX2NhcmRFbGVtZW50ID0gbnVsbDtcclxuICB9XHJcblxyXG4gIF9nZXRUZW1wbGF0ZSgpIHtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gZG9jdW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fY2FyZFNlbGVjdG9yKVxyXG4gICAgICAuY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRcIilcclxuICAgICAgLmNsb25lTm9kZSh0cnVlKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5fY2FyZEVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBnZXRWaWV3KCkge1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLl9jYXJkVGl0bGVFbGVtZW50ID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX190aXRsZVwiKTtcclxuICAgIHRoaXMuX2NhcmRUaXRsZUVsZW1lbnQudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlRWxlbWVudCA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2VFbGVtZW50LnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2VFbGVtZW50LmFsdCA9IHRoaXMuX25hbWU7XHJcbiAgICB0aGlzLl9saWtlSWNvbiA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIik7XHJcbiAgICBpZiAodGhpcy5fbGlrZVN0YXR1cylcclxuICAgICAgdGhpcy5fbGlrZUljb24uY2xhc3NMaXN0LmFkZChcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcclxuICAgIHRoaXMuX3RyYXNoSWNvbiA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdHJhc2gtYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5fZGVsZXRlTW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibW9kYWxfX2RlbGV0ZS1tb2RhbF9hY3RpdmVcIik7XHJcblxyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENhcmQ7XHJcbiIsImNsYXNzIEZvcm1WYWxpZGF0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBmb3JtRWwpIHtcclxuICAgIHRoaXMuX2Zvcm1TZWxlY3RvciA9IHNldHRpbmdzLmZvcm1TZWxlY3RvcjtcclxuICAgIHRoaXMuX2lucHV0U2VsZWN0b3IgPSBzZXR0aW5ncy5pbnB1dFNlbGVjdG9yO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSBzZXR0aW5ncy5zdWJtaXRCdXR0b25TZWxlY3RvcjtcclxuICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MgPSBzZXR0aW5ncy5pbmFjdGl2ZUJ1dHRvbkNsYXNzO1xyXG4gICAgdGhpcy5faW5wdXRFcnJvckNsYXNzID0gc2V0dGluZ3MuaW5wdXRFcnJvckNsYXNzO1xyXG4gICAgdGhpcy5fZXJyb3JDbGFzcyA9IHNldHRpbmdzLmVycm9yQ2xhc3M7XHJcbiAgICB0aGlzLl9mb3JtRWwgPSBmb3JtRWw7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QgPSBbLi4udGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvcildO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fZm9ybUVsLnF1ZXJ5U2VsZWN0b3IodGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWwpID0+IHtcclxuICAgICAgaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2lucHV0RWwgPSBpbnB1dEVsO1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsKTtcclxuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX3Nob3dJbnB1dEVycm9yKCkge1xyXG4gICAgdGhpcy5fZXJyb3JNZXNzYWdlRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHt0aGlzLl9pbnB1dEVsLmlkfS1lcnJvcmApO1xyXG4gICAgdGhpcy5fZXJyb3JNZXNzYWdlRWwudGV4dENvbnRlbnQgPSB0aGlzLl9pbnB1dEVsLnZhbGlkYXRpb25NZXNzYWdlO1xyXG4gICAgdGhpcy5faW5wdXRFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICB0aGlzLl9lcnJvck1lc3NhZ2VFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgX2NoZWNrSW5wdXRWYWxpZGl0eSgpIHtcclxuICAgIGlmICghdGhpcy5faW5wdXRFbC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fc2hvd0lucHV0RXJyb3IoKTtcclxuICAgIH1cclxuICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKCk7XHJcbiAgfVxyXG5cclxuICBfaGlkZUlucHV0RXJyb3IoKSB7XHJcbiAgICB0aGlzLl9lcnJvck1lc3NhZ2VFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3RoaXMuX2lucHV0RWwuaWR9LWVycm9yYCk7XHJcbiAgICB0aGlzLl9lcnJvck1lc3NhZ2VFbC50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgICB0aGlzLl9pbnB1dEVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcclxuICAgIHRoaXMuX2Vycm9yTWVzc2FnZUVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgfVxyXG5cclxuICBfdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XHJcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KHRoaXMuX2lucHV0TGlzdCkpIHtcclxuICAgICAgdGhpcy5fZW5hYmxlQnV0dG9uKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLl9kaXNhYmxlQnV0dG9uKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgX2hhc0ludmFsaWRJbnB1dCgpIHtcclxuICAgIHJldHVybiAhdGhpcy5faW5wdXRMaXN0LmV2ZXJ5KChpbnB1dEVsKSA9PiBpbnB1dEVsLnZhbGlkaXR5LnZhbGlkKTtcclxuICB9XHJcblxyXG4gIF9lbmFibGVCdXR0b24oKSB7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBfZGlzYWJsZUJ1dHRvbigpIHtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBlbmFibGVWYWxpZGF0aW9uKCkge1xyXG4gICAgdGhpcy5fZm9ybUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbiAgcmVzZXRWYWxpZGF0aW9uKCkge1xyXG4gICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuXHJcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbCkgPT4ge1xyXG4gICAgICB0aGlzLl9pbnB1dEVsID0gaW5wdXRFbDtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRm9ybVZhbGlkYXRvcjtcclxuIiwiLy8gQ0FSRCBEQVRBXHJcblxyXG4vLyBleHBvcnQgY29uc3QgaW5pdGlhbENhcmRzID0gW1xyXG4vLyAgIHtcclxuLy8gICAgIG5hbWU6IFwiWW9zZW1pdGUgVmFsbGV5XCIsXHJcbi8vICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QveW9zZW1pdGUuanBnXCIsXHJcbi8vICAgfSxcclxuLy8gICB7XHJcbi8vICAgICBuYW1lOiBcIkxha2UgTG91aXNlXCIsXHJcbi8vICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFrZS1sb3Vpc2UuanBnXCIsXHJcbi8vICAgfSxcclxuLy8gICB7XHJcbi8vICAgICBuYW1lOiBcIkJhbGQgTW91bnRhaW5zXCIsXHJcbi8vICAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvYmFsZC1tb3VudGFpbnMuanBnXCIsXHJcbi8vICAgfSxcclxuLy8gICB7XHJcbi8vICAgICBuYW1lOiBcIkxhdGVtYXJcIixcclxuLy8gICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYXRlbWFyLmpwZ1wiLFxyXG4vLyAgIH0sXHJcbi8vICAge1xyXG4vLyAgICAgbmFtZTogXCJWYW5vaXNlIE5hdGlvbmFsIFBhcmtcIixcclxuLy8gICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC92YW5vaXNlLmpwZ1wiLFxyXG4vLyAgIH0sXHJcbi8vICAge1xyXG4vLyAgICAgbmFtZTogXCJMYWdvIGRpIEJyYWllc1wiLFxyXG4vLyAgICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xhZ28uanBnXCIsXHJcbi8vICAgfSxcclxuLy8gXTtcclxuXHJcbi8vIFBST0ZJTEUgRUxFTUVOVFNcclxuXHJcbmV4cG9ydCBjb25zdCBwcm9maWxlRWRpdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1lZGl0LWJ1dHRvblwiKTtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVOYW1lSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21vZGFsLW5hbWUtaW5wdXRcIik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlQWJvdXRJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9kYWwtYWJvdXQtaW5wdXRcIik7XHJcbmV4cG9ydCBjb25zdCBhdmF0YXJVcGRhdGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiLnByb2ZpbGVfX2F2YXRhci1lZGl0XCJcclxuKTtcclxuLy8gZXhwb3J0IGNvbnN0IHByb2ZpbGVBdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21vZGFsLWF2YXRhci1pbnB1dFwiKTtcclxuXHJcbi8vQ0FSRCBFTEVNRU5UU1xyXG5cclxuZXhwb3J0IGNvbnN0IGNhcmRBZGRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NhcmQtYWRkLWJ1dHRvblwiKTtcclxuZXhwb3J0IGNvbnN0IGNhcmRMaXN0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNfX2xpc3RcIik7XHJcbmV4cG9ydCBjb25zdCBjYXJkRGVsZXRlQ29uZmlybUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9kYWwtZGVsLWJ0blwiKTtcclxuXHJcbi8vIFNFTEVDVE9SU1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcclxuICBmb3JtU2VsZWN0b3I6IFwiLm1vZGFsX19mb3JtXCIsXHJcbiAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLm1vZGFsX19zYXZlLWJ1dHRvblwiLFxyXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwibW9kYWxfX2J1dHRvbi1kaXNhYmxlZFwiLFxyXG4gIGlucHV0RXJyb3JDbGFzczogXCJtb2RhbF9faW5wdXRfdHlwZV9lcnJvclwiLFxyXG4gIGVycm9yQ2xhc3M6IFwibW9kYWxfX2lucHV0LWVycm9yX3Zpc2libGVcIixcclxufTtcclxuIiwiY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHsgcG9wdXBTZWxlY3RvciB9KSB7XHJcbiAgICB0aGlzLl9tb2RhbEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIG9wZW4oKSB7XHJcbiAgICB0aGlzLl9tb2RhbEVsLmNsYXNzTGlzdC5hZGQoXCJtb2RhbF9vcGVuZWRcIik7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5faGFuZGxlRXNjKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fbW9kYWxFbC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMuX2hhbmRsZUVzYyk7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlRXNjID0gKGUpID0+IHtcclxuICAgIGlmIChlLmtleSA9PT0gXCJFc2NhcGVcIikgdGhpcy5jbG9zZSgpO1xyXG4gIH07XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fbW9kYWxFbC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChlKSA9PiB7XHJcbiAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbF9vcGVuZWRcIikpIHtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsX19jbG9zZVwiKSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQb3B1cDtcclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5jbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZUZvcm1TdWJtaXQpIHtcclxuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgIHRoaXMuX3BvcHVwRm9ybSA9IHRoaXMuX21vZGFsRWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX21vZGFsRWwucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fc2F2ZS1idXR0b25cIik7XHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICAgIHRoaXMuX2xpc3QgPSBbLi4udGhpcy5fcG9wdXBGb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWxfX2lucHV0XCIpXTtcclxuICB9XHJcblxyXG4gIHNldFNhdmUoKSB7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBcIlNhdmVcIjtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtLnJlc2V0KCk7XHJcbiAgICBzdXBlci5jbG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgc2V0TG9hZGluZyhsb2FkaW5nKSB7XHJcbiAgICBpZiAobG9hZGluZykge1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBcIlNhdmluZy4uLlwiO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgY29uc3QgaW5wdXREYXRhID0ge307XHJcbiAgICB0aGlzLl9saXN0LmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIGlucHV0RGF0YVtpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGlucHV0RGF0YTtcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xyXG4gICAgfSk7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUG9wdXBXaXRoRm9ybTtcclxuIiwiY2xhc3MgVXNlckluZm8ge1xyXG4gIGNvbnN0cnVjdG9yKG5hbWVTZWxlY3RvciwgYWJvdXRTZWxlY3RvciwgYXZhdGFyU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX25hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9hYm91dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYWJvdXRTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9hdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGF2YXRhclNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgcmV0dXJuIHsgbmFtZTogdGhpcy5fbmFtZS50ZXh0Q29udGVudCwgYWJvdXQ6IHRoaXMuX2Fib3V0LnRleHRDb250ZW50IH07XHJcbiAgfVxyXG5cclxuICBzZXRVc2VyQXZhdGFyKGxpbmspIHtcclxuICAgIHRoaXMuX2F2YXRhci5zcmMgPSBsaW5rO1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckluZm8oeyBuYW1lLCBhYm91dCwgYXZhdGFyIH0pIHtcclxuICAgIGlmIChuYW1lKSB0aGlzLl9uYW1lLnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgIGlmIChhYm91dCkgdGhpcy5fYWJvdXQudGV4dENvbnRlbnQgPSBhYm91dDtcclxuICAgIGlmIChhdmF0YXIpIHRoaXMuX2F2YXRhci5zcmMgPSBhdmF0YXI7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBVc2VySW5mbztcclxuIiwiY2xhc3MgU2VjdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoeyBkYXRhLCByZW5kZXJlciB9LCBjb250YWluZXIpIHtcclxuICAgIHRoaXMuX2l0ZW1zID0gZGF0YTtcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgfVxyXG5cclxuICByZW5kZXJJdGVtcygpIHtcclxuICAgIHRoaXMuX2l0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFkZEl0ZW0oZWxlbWVudCkge1xyXG4gICAgdGhpcy5fY29udGFpbmVyLnByZXBlbmQoZWxlbWVudCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWN0aW9uO1xyXG4iLCJpbXBvcnQgQ2FyZCBmcm9tIFwiLi4vY29tcG9uZW50cy9DYXJkLmpzXCI7XHJcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IFBvcHVwQ29uZmlybWF0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwQ29uZmlybWF0aW9uLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEltYWdlcyBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xyXG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm8uanNcIjtcclxuaW1wb3J0IEFwaSBmcm9tIFwiLi4vY29tcG9uZW50cy9BcGkuanNcIjtcclxuaW1wb3J0IFwiLi4vcGFnZXMvaW5kZXguY3NzXCI7XHJcbmltcG9ydCB7XHJcbiAgY2FyZEFkZEJ1dHRvbixcclxuICBhdmF0YXJVcGRhdGVCdXR0b24sXHJcbiAgcHJvZmlsZUVkaXRCdXR0b24sXHJcbiAgcHJvZmlsZU5hbWVJbnB1dCxcclxuICBwcm9maWxlQWJvdXRJbnB1dCxcclxuICBjYXJkTGlzdEVsZW1lbnQsXHJcbiAgY29uZmlnLFxyXG59IGZyb20gXCIuLi91dGlscy91dGlscy5qc1wiO1xyXG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XHJcblxyXG5jb25zdCBmb3JtVmFsaWRhdG9ycyA9IHt9O1xyXG5cclxuY29uc3QgZW5hYmxlVmFsaWRhdGlvbiA9IChjb25maWcpID0+IHtcclxuICBjb25zdCBmb3JtTGlzdCA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChjb25maWcuZm9ybVNlbGVjdG9yKSk7XHJcbiAgZm9ybUxpc3QuZm9yRWFjaCgoZm9ybUVsZW1lbnQpID0+IHtcclxuICAgIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKGNvbmZpZywgZm9ybUVsZW1lbnQpO1xyXG4gICAgY29uc3QgZm9ybU5hbWUgPSBmb3JtRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpO1xyXG4gICAgZm9ybVZhbGlkYXRvcnNbZm9ybU5hbWVdID0gdmFsaWRhdG9yO1xyXG4gICAgdmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuICB9KTtcclxufTtcclxuXHJcbmVuYWJsZVZhbGlkYXRpb24oY29uZmlnKTtcclxuXHJcbi8vVkFSXHJcblxyXG5sZXQgY2FyZFNlY3Rpb247XHJcbmxldCBpbml0aWFsVXNlckRhdGE7XHJcblxyXG4vL0FQSVxyXG5cclxuZXhwb3J0IGNvbnN0IGFwaSA9IG5ldyBBcGkoe1xyXG4gIGJhc2VVcmw6IFwiaHR0cHM6Ly9hcm91bmQtYXBpLmVuLnRyaXBsZXRlbi1zZXJ2aWNlcy5jb20vdjFcIixcclxuICBhdXRob3JpemF0aW9uOiBcIjdkY2Q5YTkzLTE0OWMtNGU1Ni04N2RiLTkyODVjOTE3N2E5ZVwiLFxyXG59KTtcclxuXHJcbmFwaS5nZXRTZXJ2ZXJEYXRhKCkudGhlbigoW2RhdGEsIGNhcmRzXSkgPT4ge1xyXG4gIGluaXRpYWxVc2VyRGF0YSA9IG5ldyBVc2VySW5mbyhcclxuICAgIFwiI3Byb2ZpbGUtbmFtZVwiLFxyXG4gICAgXCIjcHJvZmlsZS1hYm91dFwiLFxyXG4gICAgXCIjcHJvZmlsZS1hdmF0YXJcIlxyXG4gICk7XHJcbiAgaW5pdGlhbFVzZXJEYXRhLnNldFVzZXJJbmZvKGRhdGEpO1xyXG5cclxuICBjYXJkU2VjdGlvbiA9IG5ldyBTZWN0aW9uKFxyXG4gICAge1xyXG4gICAgICBkYXRhOiBjYXJkcyxcclxuICAgICAgcmVuZGVyZXI6IChkYXRhKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2FyZEVsZW1lbnQgPSBjcmVhdGVDYXJkKGRhdGEpO1xyXG4gICAgICAgIGNhcmRTZWN0aW9uLmFkZEl0ZW0oY2FyZEVsZW1lbnQpO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIGNhcmRMaXN0RWxlbWVudFxyXG4gICk7XHJcbiAgY2FyZFNlY3Rpb24ucmVuZGVySXRlbXMoKTtcclxufSk7XHJcblxyXG5jb25zdCBjcmVhdGVDYXJkID0gKGNhcmRJdGVtKSA9PiB7XHJcbiAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKFxyXG4gICAgY2FyZEl0ZW0sXHJcbiAgICBcIiNjYXJkLXRlbXBsYXRlXCIsXHJcbiAgICAoKSA9PiB7XHJcbiAgICAgIGltZ1BvcHVwLm9wZW4oY2FyZEl0ZW0pO1xyXG4gICAgfSxcclxuICAgICgpID0+IHtcclxuICAgICAgZGVsZXRlQ29uZmlybVBvcHVwLm9wZW4oY2FyZCk7XHJcbiAgICB9LFxyXG5cclxuICAgIChsaWtlU3RhdHVzLCBpZCkgPT4ge1xyXG4gICAgICBpZiAoIWxpa2VTdGF0dXMpIHtcclxuICAgICAgICBhcGlcclxuICAgICAgICAgIC5saWtlQ2FyZChpZClcclxuICAgICAgICAgIC50aGVuKCgpID0+IGNhcmQuaGFuZGxlTGlrZUljb24oKSlcclxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmVycm9yKGAke2Vycn0sIEZhaWxlZCB0byBsaWtlIGNhcmRgKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXBpXHJcbiAgICAgICAgICAuZGlzTGlrZUNhcmQoaWQpXHJcbiAgICAgICAgICAudGhlbigoKSA9PiBjYXJkLmhhbmRsZUxpa2VJY29uKCkpXHJcbiAgICAgICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcihgJHtlcnJ9LCBGYWlsZWQgdG8gZGlzbGlrZSBjYXJkYCkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgKTtcclxuICByZXR1cm4gY2FyZC5nZXRWaWV3KCk7XHJcbn07XHJcblxyXG4vL1BvcHVwc1xyXG5cclxuY29uc3QgaW1nUG9wdXAgPSBuZXcgUG9wdXBXaXRoSW1hZ2VzKFwiI2NhcmQtcGljdHVyZS1tb2RhbFwiKTtcclxuaW1nUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmNvbnN0IHByb2ZpbGVQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFxyXG4gIFwiI3Byb2ZpbGUtZWRpdC1tb2RhbFwiLFxyXG4gIGhhbmRsZVByb2ZpbGVVcGRhdGVcclxuKTtcclxucHJvZmlsZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5jb25zdCBuZXdDYXJkUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcIiNjYXJkLWFkZC1tb2RhbFwiLCBoYW5kbGVBZGRDYXJkKTtcclxubmV3Q2FyZFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5leHBvcnQgY29uc3QgZGVsZXRlQ29uZmlybVBvcHVwID0gbmV3IFBvcHVwQ29uZmlybWF0aW9uKFxyXG4gIFwiI21vZGFsLWRlbGV0ZVwiLFxyXG4gIGhhbmRsZURlbGV0ZUNvbmZpcm1hdGlvblxyXG4pO1xyXG5kZWxldGVDb25maXJtUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmNvbnN0IGF2YXRhclBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXCIjbW9kYWwtYXZhdGFyXCIsIGhhbmRsZVVwZGF0ZUF2YXRhcik7XHJcbmF2YXRhclBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4vL0hBTkRMRVNcclxuXHJcbi8vIGZ1bmN0aW9uIGhhbmRsZVN1Ym1pdChyZXF1ZXN0LCBwb3B1cEluc3RhbmNlLCBsb2FkaW5nVGV4dCA9IFwiU2F2aW5nLi4uXCIpIHtcclxuLy8gICBwb3B1cEluc3RhbmNlLnJlbmRlckxvYWRpbmcodHJ1ZSwgbG9hZGluZ1RleHQpO1xyXG4vLyAgIHJlcXVlc3QoKVxyXG4vLyAgICAgLnRoZW4oKCkgPT4ge1xyXG4vLyAgICAgICBwb3B1cEluc3RhbmNlLmNsb3NlKCk7XHJcbi8vICAgICB9KVxyXG4vLyAgICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpXHJcbi8vICAgICAuZmluYWxseSgoKSA9PiB7XHJcbi8vICAgICAgIHBvcHVwSW5zdGFuY2UucmVuZGVyTG9hZGluZyhmYWxzZSk7XHJcbi8vICAgICB9KTtcclxuLy8gfVxyXG5cclxuLy8gZnVuY3Rpb24gaGFuZGxlUHJvZmlsZUZvcm1TdWJtaXQoaW5wdXRWYWx1ZXMpIHtcclxuLy8gICAgICAgICB3ZSBjcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBwcm9taXNlXHJcbi8vICAgZnVuY3Rpb24gbWFrZVJlcXVlc3QoKSB7XHJcbi8vICAgICAgICBgcmV0dXJuYCBsZXRzIHVzIHVzZSBhIHByb21pc2UgY2hhaW4gYHRoZW4sIGNhdGNoLCBmaW5hbGx5YCBpbnNpZGUgYGhhbmRsZVN1Ym1pdGBcclxuLy8gICAgIHJldHVybiBhcGkuZWRpdFByb2ZpbGUoaW5wdXRWYWx1ZXMpLnRoZW4oKHVzZXJEYXRhKSA9PiB7XHJcbi8vICAgICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHVzZXJEYXRhKVxyXG4vLyAgICAgfSk7XHJcbi8vICAgfVxyXG4vLyAgICAgICAgIEhlcmUgd2UgY2FsbCB0aGUgZnVuY3Rpb24gcGFzc2luZyB0aGUgcmVxdWVzdCwgcG9wdXAgaW5zdGFuY2UgYW5kIGlmIHdlIG5lZWQgc29tZSBvdGhlciBsb2FkaW5nIHRleHQgd2UgY2FuIHBhc3MgaXQgYXMgdGhlIDNyZCBhcmd1bWVudFxyXG4vLyAgIGhhbmRsZVN1Ym1pdChtYWtlUmVxdWVzdCwgcHJvZmlsZVBvcHVwKTtcclxuLy8gfVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlRGVsZXRlQ29uZmlybWF0aW9uKGNhcmQsIGlkKSB7XHJcbiAgYXBpXHJcbiAgICAuZGVsZXRlQ2FyZChpZClcclxuICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgY2FyZC5oYW5kbGVEZWxldGVDYXJkKCk7XHJcbiAgICAgIGRlbGV0ZUNvbmZpcm1Qb3B1cC5jbG9zZSgpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmVycm9yKGAke2Vycn0sIEZhaWxlZCB0byBkZWxldGUgY2FyZGApKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlUHJvZmlsZVVwZGF0ZSh1c2VyRGF0YSkge1xyXG4gIHByb2ZpbGVQb3B1cC5zZXRMb2FkaW5nKHRydWUpO1xyXG4gIGFwaVxyXG4gICAgLnVwZGF0ZVVzZXJEYXRhKHVzZXJEYXRhKVxyXG4gICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICBpbml0aWFsVXNlckRhdGEuc2V0VXNlckluZm8odXNlckRhdGEpO1xyXG4gICAgICBwcm9maWxlUG9wdXAuY2xvc2UoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcihgJHtlcnJ9LCBGYWlsZWQgdG8gdXBkYXRlIFByb2ZpbGUgSW5mb2ApKVxyXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICBwcm9maWxlUG9wdXAuc2V0U2F2ZSgpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUFkZENhcmQoY2FyZERhdGEpIHtcclxuICBuZXdDYXJkUG9wdXAuc2V0TG9hZGluZyh0cnVlKTtcclxuICBhcGlcclxuICAgIC5jcmVhdGVDYXJkKGNhcmREYXRhKVxyXG4gICAgLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgY29uc3QgY2FyZEZvcm1FbGVtZW50ID0gY3JlYXRlQ2FyZChkYXRhKTtcclxuICAgICAgY2FyZFNlY3Rpb24uYWRkSXRlbShjYXJkRm9ybUVsZW1lbnQpO1xyXG4gICAgICBuZXdDYXJkUG9wdXAuY2xvc2UoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcihgJHtlcnJ9LCBGYWlsZWQgdG8gYWRkIENhcmRgKSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgbmV3Q2FyZFBvcHVwLnNldFNhdmUoKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVVcGRhdGVBdmF0YXIoaW5wdXQpIHtcclxuICBhdmF0YXJQb3B1cC5zZXRMb2FkaW5nKHRydWUpO1xyXG4gIGFwaVxyXG4gICAgLnVwZGF0ZUF2YXRhcihpbnB1dC5saW5rKVxyXG4gICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICBpbml0aWFsVXNlckRhdGEuc2V0VXNlckF2YXRhcihpbnB1dC5saW5rKTtcclxuICAgICAgYXZhdGFyUG9wdXAuY2xvc2UoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcihgJHtlcnJ9LCBGYWlsZWQgdG8gdXBkYXRlIEF2YXRhcmApKVxyXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICBhdmF0YXJQb3B1cC5zZXRTYXZlKCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLy9FVkVOVCBMSVNURU5FUlxyXG5cclxucHJvZmlsZUVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBmb3JtVmFsaWRhdG9yc1tcInByb2ZpbGVGb3JtXCJdLnJlc2V0VmFsaWRhdGlvbigpO1xyXG4gIGNvbnN0IGRhdGEgPSBpbml0aWFsVXNlckRhdGEuZ2V0VXNlckluZm8oKTtcclxuICBwcm9maWxlTmFtZUlucHV0LnZhbHVlID0gZGF0YS5uYW1lO1xyXG4gIHByb2ZpbGVBYm91dElucHV0LnZhbHVlID0gZGF0YS5hYm91dDtcclxuICBwcm9maWxlUG9wdXAub3BlbigpO1xyXG59KTtcclxuXHJcbmNhcmRBZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBmb3JtVmFsaWRhdG9yc1tcImFkZENhcmRGb3JtXCJdLnJlc2V0VmFsaWRhdGlvbigpO1xyXG4gIG5ld0NhcmRQb3B1cC5vcGVuKCk7XHJcbn0pO1xyXG5cclxuYXZhdGFyVXBkYXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgZm9ybVZhbGlkYXRvcnNbXCJhdmF0YXJVcGRhdGVcIl0ucmVzZXRWYWxpZGF0aW9uKCk7XHJcbiAgYXZhdGFyUG9wdXAub3BlbigpO1xyXG59KTtcclxuIiwiY2xhc3MgQXBpIHtcclxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICB0aGlzLl9iYXNlVXJsID0gb3B0aW9ucy5iYXNlVXJsO1xyXG4gICAgdGhpcy5faGVhZGVycyA9IHtcclxuICAgICAgYXV0aG9yaXphdGlvbjogYCR7b3B0aW9ucy5hdXRob3JpemF0aW9ufWAsXHJcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGdldFNlcnZlckRhdGEoKSB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW3RoaXMuZ2V0VXNlckRhdGEoKSwgdGhpcy5nZXRJbml0aWFsQ2FyZHMoKV0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0SW5pdGlhbENhcmRzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldFVzZXJEYXRhKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVXNlckRhdGEoeyBuYW1lLCBhYm91dCB9KSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbmFtZTogYCR7bmFtZX1gLCBhYm91dDogYCR7YWJvdXR9YCB9KSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlQXZhdGFyKGxpbmspIHtcclxuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgYXZhdGFyOiBsaW5rIH0pLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRDYXJkcyhpZCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtpZH1gLCB7XHJcbiAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlQ2FyZCh7IG5hbWUsIGxpbmsgfSkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbmFtZTogYCR7bmFtZX1gLCBsaW5rOiBgJHtsaW5rfWAgfSksXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZUNhcmQoaWQpIHtcclxuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7aWR9YCwge1xyXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGxpa2VDYXJkKGlkKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2lkfS9saWtlc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGlzTGlrZWQ6IHRydWUgfSksXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGRpc0xpa2VDYXJkKGlkKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2lkfS9saWtlc2AsIHtcclxuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfY2hlY2tSZXNwb25zZShyZXMpIHtcclxuICAgIGlmIChyZXMub2spIHtcclxuICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yOiAke3Jlcy5zdGF0dXN9YCk7XHJcbiAgfVxyXG5cclxuICBfcmVxdWVzdCh1cmwsIG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBmZXRjaCh1cmwsIG9wdGlvbnMpLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBcGk7XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgc3VwZXIoeyBwb3B1cFNlbGVjdG9yIH0pO1xyXG4gICAgdGhpcy5fcG9wdXBJbWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX3BpY3R1cmUtdmlld1wiKTtcclxuICAgIHRoaXMuX3BvcHVwVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19waWN0dXJlLWhlYWRpbmdcIik7XHJcbiAgfVxyXG5cclxuICBvcGVuKHsgbmFtZSwgbGluayB9KSB7XHJcbiAgICB0aGlzLl9wb3B1cEltYWdlLnNyYyA9IGxpbms7XHJcbiAgICB0aGlzLl9wb3B1cEltYWdlLmFsdCA9IG5hbWU7XHJcbiAgICB0aGlzLl9wb3B1cFRpdGxlLnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgIHN1cGVyLm9wZW4oKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBvcHVwV2l0aEltYWdlO1xyXG4iLCJpbXBvcnQgeyBjYXJkRGVsZXRlQ29uZmlybUJ1dHRvbiB9IGZyb20gXCIuLi91dGlscy91dGlscy5qc1wiO1xyXG5pbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmNsYXNzIFBvcHVwQ29uZmlybWF0aW9uIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZURlbGV0ZUNvbmZpcm1hdGlvbikge1xyXG4gICAgc3VwZXIoeyBwb3B1cFNlbGVjdG9yIH0pO1xyXG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQ29uZmlybWF0aW9uID0gaGFuZGxlRGVsZXRlQ29uZmlybWF0aW9uO1xyXG4gIH1cclxuXHJcbiAgb3BlbihjYXJkKSB7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgICB0aGlzLl9jYXJkSWQgPSBjYXJkLl9pZDtcclxuICAgIHRoaXMuX2NhcmQgPSBjYXJkO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBjYXJkRGVsZXRlQ29uZmlybUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVEZWxldGVDb25maXJtYXRpb24odGhpcy5fY2FyZCwgdGhpcy5fY2FyZElkKTtcclxuICAgIH0pO1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBvcHVwQ29uZmlybWF0aW9uO1xyXG4iXSwibmFtZXMiOlsiY29uc3RydWN0b3IiLCJkYXRhIiwiY2FyZFNlbGVjdG9yIiwiaGFuZGxlSW1hZ2VDbGljayIsImhhbmRsZURlbGV0ZUNsaWNrIiwiaGFuZGxlTGlrZURpc2xpa2VDbGljayIsInRoaXMiLCJfbmFtZSIsIm5hbWUiLCJfbGluayIsImxpbmsiLCJfaWQiLCJfbGlrZVN0YXR1cyIsImlzTGlrZWQiLCJfY2FyZFNlbGVjdG9yIiwiX2hhbmRsZUltYWdlQ2xpY2siLCJfaGFuZGxlRGVsZXRlQ2xpY2siLCJfaGFuZGxlTGlrZURpc2xpa2UiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfY2FyZEltYWdlRWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJfbGlrZUljb24iLCJfdHJhc2hJY29uIiwiaGFuZGxlTGlrZUljb24iLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJoYW5kbGVEZWxldGVDYXJkIiwiX2NhcmRFbGVtZW50IiwicmVtb3ZlIiwiX2dldFRlbXBsYXRlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudCIsImNsb25lTm9kZSIsImdldFZpZXciLCJfZWxlbWVudCIsIl9jYXJkVGl0bGVFbGVtZW50IiwidGV4dENvbnRlbnQiLCJzcmMiLCJhbHQiLCJhZGQiLCJfZGVsZXRlTW9kYWwiLCJzZXR0aW5ncyIsImZvcm1FbCIsIl9mb3JtU2VsZWN0b3IiLCJmb3JtU2VsZWN0b3IiLCJfaW5wdXRTZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl9pbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9pbnB1dEVycm9yQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJfZXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJfZm9ybUVsIiwiX2lucHV0TGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfc3VibWl0QnV0dG9uIiwiZm9yRWFjaCIsImlucHV0RWwiLCJfaW5wdXRFbCIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJfdG9nZ2xlQnV0dG9uU3RhdGUiLCJfc2hvd0lucHV0RXJyb3IiLCJfZXJyb3JNZXNzYWdlRWwiLCJpZCIsInZhbGlkYXRpb25NZXNzYWdlIiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9oaWRlSW5wdXRFcnJvciIsIl9oYXNJbnZhbGlkSW5wdXQiLCJfZW5hYmxlQnV0dG9uIiwiX2Rpc2FibGVCdXR0b24iLCJldmVyeSIsImRpc2FibGVkIiwiZW5hYmxlVmFsaWRhdGlvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInJlc2V0VmFsaWRhdGlvbiIsInByb2ZpbGVFZGl0QnV0dG9uIiwicHJvZmlsZU5hbWVJbnB1dCIsInByb2ZpbGVBYm91dElucHV0IiwiYXZhdGFyVXBkYXRlQnV0dG9uIiwiY2FyZEFkZEJ1dHRvbiIsImNhcmRMaXN0RWxlbWVudCIsImNhcmREZWxldGVDb25maXJtQnV0dG9uIiwiX3JlZiIsInBvcHVwU2VsZWN0b3IiLCJfbW9kYWxFbCIsIm9wZW4iLCJfaGFuZGxlRXNjIiwiY2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwia2V5Iiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJ0YXJnZXQiLCJjb250YWlucyIsIlBvcHVwIiwiaGFuZGxlRm9ybVN1Ym1pdCIsInN1cGVyIiwiX3BvcHVwRm9ybSIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX2xpc3QiLCJzZXRTYXZlIiwicmVzZXQiLCJzZXRMb2FkaW5nIiwibG9hZGluZyIsIl9nZXRJbnB1dFZhbHVlcyIsImlucHV0RGF0YSIsImlucHV0IiwidmFsdWUiLCJuYW1lU2VsZWN0b3IiLCJhYm91dFNlbGVjdG9yIiwiYXZhdGFyU2VsZWN0b3IiLCJfYWJvdXQiLCJfYXZhdGFyIiwiZ2V0VXNlckluZm8iLCJhYm91dCIsInNldFVzZXJBdmF0YXIiLCJzZXRVc2VySW5mbyIsImF2YXRhciIsImNvbnRhaW5lciIsInJlbmRlcmVyIiwiX2l0ZW1zIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsInJlbmRlckl0ZW1zIiwiaXRlbSIsImFkZEl0ZW0iLCJlbGVtZW50IiwicHJlcGVuZCIsImZvcm1WYWxpZGF0b3JzIiwiY2FyZFNlY3Rpb24iLCJpbml0aWFsVXNlckRhdGEiLCJjb25maWciLCJBcnJheSIsImZyb20iLCJmb3JtRWxlbWVudCIsInZhbGlkYXRvciIsIkZvcm1WYWxpZGF0b3IiLCJmb3JtTmFtZSIsImdldEF0dHJpYnV0ZSIsImFwaSIsIm9wdGlvbnMiLCJfYmFzZVVybCIsImJhc2VVcmwiLCJfaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJnZXRTZXJ2ZXJEYXRhIiwiUHJvbWlzZSIsImFsbCIsImdldFVzZXJEYXRhIiwiZ2V0SW5pdGlhbENhcmRzIiwiX3JlcXVlc3QiLCJoZWFkZXJzIiwibWV0aG9kIiwidXBkYXRlVXNlckRhdGEiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInVwZGF0ZUF2YXRhciIsImdldENhcmRzIiwiY3JlYXRlQ2FyZCIsIl9yZWYyIiwiZGVsZXRlQ2FyZCIsImxpa2VDYXJkIiwiZGlzTGlrZUNhcmQiLCJfY2hlY2tSZXNwb25zZSIsInJlcyIsIm9rIiwianNvbiIsInJlamVjdCIsInN0YXR1cyIsInVybCIsImZldGNoIiwidGhlbiIsImNhcmRzIiwiVXNlckluZm8iLCJTZWN0aW9uIiwiY2FyZEVsZW1lbnQiLCJjYXJkSXRlbSIsImNhcmQiLCJDYXJkIiwiaW1nUG9wdXAiLCJkZWxldGVDb25maXJtUG9wdXAiLCJsaWtlU3RhdHVzIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJfcG9wdXBJbWFnZSIsIl9wb3B1cFRpdGxlIiwicHJvZmlsZVBvcHVwIiwiUG9wdXBXaXRoRm9ybSIsInVzZXJEYXRhIiwiZmluYWxseSIsIm5ld0NhcmRQb3B1cCIsImNhcmREYXRhIiwiY2FyZEZvcm1FbGVtZW50IiwiaGFuZGxlRGVsZXRlQ29uZmlybWF0aW9uIiwiX2hhbmRsZURlbGV0ZUNvbmZpcm1hdGlvbiIsIl9jYXJkSWQiLCJfY2FyZCIsImF2YXRhclBvcHVwIl0sInNvdXJjZVJvb3QiOiIifQ==