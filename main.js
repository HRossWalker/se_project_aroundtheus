!function(){"use strict";var t={d:function(e,s){for(var i in s)t.o(s,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:s[i]})},o:function(t,e){return Object.prototype.hasOwnProperty.call(t,e)}};t.d({},{h:function(){return v},A:function(){return I}});var e=class{constructor(t,e,s,i,r){this._name=t.name,this._link=t.link,this._id=t._id,this._likeStatus=t.isLiked,this._cardSelector=e,this._handleImageClick=s,this._handleLikeDisLike=r,this._handleDeleteClick=i}_setEventListeners(){this._cardImageElement.addEventListener("click",(()=>this._handleImageClick(this))),this._likeIcon.addEventListener("click",(()=>this._handleLikeIcon())),this._trashIcon.addEventListener("click",(()=>{this._handleDeleteClick(this._id)}))}_handleLikeIcon(){this._likeIcon.classList.toggle("card__like-button_active"),this._likeStatus||v.likeCard(this._id),v.disLikeCard(this._id)}_handleDeleteConfirm(t){I.open(t)}handleDeleteCard(t){this._cardElement.remove(),v.deleteCard(t)}_getTemplate(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement}getView(){return this._element=this._getTemplate(),this._cardTitleElement=this._cardElement.querySelector(".card__title"),this._cardTitleElement.textContent=this._name,this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._likeIcon=this._cardElement.querySelector(".card__like-button"),this._likeStatus&&this._likeIcon.classList.add("card__like-button_active"),this._trashIcon=this._cardElement.querySelector(".card__trash-button"),this._deleteModal=document.querySelector("modal__delete-modal_active"),this._setEventListeners(),this._element}},s=class{constructor(t,e){this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formEl=e,this._inputList=[...this._formEl.querySelectorAll(this._inputSelector)],this._submitButton=this._formEl.querySelector(this._submitButtonSelector)}_setEventListeners(){this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._inputEl=t,this._checkInputValidity(t),this._toggleButtonState()}))}))}_showInputError(){this._errorMessageEl=document.querySelector(`#${this._inputEl.id}-error`),this._errorMessageEl.textContent=this._inputEl.validationMessage,this._inputEl.classList.add(this._inputErrorClass),this._errorMessageEl.classList.add(this._errorClass)}_checkInputValidity(){if(!this._inputEl.validity.valid)return this._showInputError();this._hideInputError()}_hideInputError(){this._errorMessageEl=document.querySelector(`#${this._inputEl.id}-error`),this._errorMessageEl.textContent="",this._inputEl.classList.remove(this._inputErrorClass),this._errorMessageEl.classList.remove(this._errorClass)}_toggleButtonState(){this._hasInvalidInput(this._inputList)?this._enableButton(this._inactiveButtonClass):this._disableButton(this._inactiveButtonClass)}_hasInvalidInput(){return!this._inputList.every((t=>t.validity.valid))}_enableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_disableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}enableValidation(){this._formEl.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputList.forEach((t=>{this._inputEl=t,this._hideInputError()}))}};const i=document.querySelector("#profile-edit-button"),r=document.querySelector("#modal-name-input"),a=document.querySelector("#modal-about-input"),n=document.querySelector(".profile__image"),o=document.querySelector(".profile__avatar-edit"),l=document.querySelector("#card-add-button"),d=document.querySelector(".cards__list"),c=document.querySelector("#modal-del-btn");var h=class{constructor(t){let{popupSelector:e}=t;this._modalEl=document.querySelector(e)}open(){this._modalEl.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEsc)}close(){this._modalEl.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEsc)}_handleEsc=t=>{"Escape"===t.key&&this.close()};setEventListeners(){this._modalEl.addEventListener("mousedown",(t=>{t.target.classList.contains("modal_opened")&&this.close(),t.target.classList.contains("modal__close")&&this.close()}))}},u=class extends h{constructor(t,e){super({popupSelector:t}),this._popupForm=this._modalEl.querySelector(".modal__form"),this._submitButton=this._modalEl.querySelector(".modal__save-button"),this._handleFormSubmit=e,this._list=[...this._popupForm.querySelectorAll(".modal__input")]}open(){this._submitButton.textContent="Save",super.open()}close(){this._popupForm.reset(),super.close()}setLoading(t){t&&(this._submitButton.textContent="Saving...")}_getInputValues(){const t={};return this._list.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(()=>{this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}},_=class{constructor(t){this._name=document.querySelector(".profile__name"),this._name.textContent=t.name,this._about=document.querySelector(".profile__about"),this._about.textContent=t.about,this._avatar=document.querySelector(".profile__image"),this._avatar.src=t.avatar}getUserInfo(){return v.getUserData()}setUserAvatar(t){this._avatar.src=t}setUserInfo(t){let{name:e,about:s}=t;this._name.textContent=e,this._about.textContent=s,v.updateUserData({name:e,about:s})}},m=class{constructor(t,e){let{data:s,renderer:i}=t;this._items=s,this._renderer=i,this._container=e}renderItems(){this._items.forEach((t=>{this._renderer(t)}))}addItem(t){this._container.prepend(t)}};const p={};var E;E={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__button-disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_visible"},Array.from(document.querySelectorAll(E.formSelector)).forEach((t=>{const e=new s(E,t),i=t.getAttribute("name");p[i]=e,e.enableValidation()}));const v=new class{constructor(t){this._baseUrl=t.baseUrl,this._auth=t.authorization,this._id}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:`${this._auth}`}}).then((t=>t.ok?t.json():Promise.reject(`Error: ${t.status}`)))}getUserData(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:{authorization:`${this._auth}`,"Content-Type":"application/json"}})}updateUserData(t){let{name:e,about:s}=t;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:`${this._auth}`,"Content-Type":"application/json"},body:JSON.stringify({name:`${e}`,about:`${s}`})})}updateAvatar(t){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:`${this._auth}`,"Content-Type":"application/json"},body:JSON.stringify({avatar:t})})}getCards(t){return fetch(`${this._baseUrl}/cards/${t}`,{method:"GET",headers:{authorization:`${this._auth}`}})}createCard(t){let{name:e,link:s}=t;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:`${this._auth}`,"Content-Type":"application/json"},body:JSON.stringify({name:`${e}`,link:`${s}`})})}deleteCard(t){return fetch(`${this._baseUrl}/cards/${t}`,{method:"DELETE",headers:{authorization:`${this._auth}`,"Content-Type":"application/json"}})}likeCard(t){return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:"PUT",headers:{authorization:`${this._auth}`,"Content-Type":"application/json"},body:JSON.stringify({isLiked:!0})})}disLikeCard(t){return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:"DELETE",headers:{authorization:`${this._auth}`,"Content-Type":"application/json"}})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",authorization:"7dcd9a93-149c-4e56-87db-9285c9177a9e"});v.getUserData().then((t=>t.json())).then((t=>{f=t.avatar,S=new _(t)})),v.getInitialCards().then((t=>{L=new m({data:t,renderer:t=>{const e=b(t);L.addItem(e)}},d),L.renderItems()}));const b=t=>{const s=new e(t,"#card-template",(()=>{g.open(t)}),(()=>{I.open(s)}));return s.getView()};let L,S,f,y;const g=new class extends h{constructor(t){super({popupSelector:t}),this._popupImage=document.querySelector(".modal__picture-view"),this._popupTitle=document.querySelector(".modal__picture-heading")}open(t){let{name:e,link:s}=t;this._popupImage.src=s,this._popupImage.alt=e,this._popupTitle.textContent=e,super.open()}}("#card-picture-modal");g.setEventListeners();const C=new u("#profile-edit-modal",(function(t){S.setUserInfo(t),C.setLoading(!0),v.updateUserData(t).then((()=>C.close())).catch((t=>console.error(`${t}, Failed to update Avatar`))).finally((()=>C.setLoading(!1)))}));C.setEventListeners();const k=new u("#card-add-modal",(function(t){k.setLoading(!0),v.createCard(t).then((t=>{if(t.ok)return t.json()})).then((t=>{const e=b(t);L.addItem(e),k.close()})).catch((t=>console.error(`${t}, Failed to update Avatar`))).finally((()=>k.setLoading(!1)))}));k.setEventListeners();const I=new class extends h{constructor(t,e){super({popupSelector:t}),this._handleDeleteConfirmation=e}open(t){super.open(),this._cardId=t._id,this._card=t}setEventListeners(){c.addEventListener("click",(()=>{this._handleDeleteConfirmation(this._card,this._cardId),this.close()})),super.setEventListeners()}}("#modal-delete",(function(t,e){t.handleDeleteCard(e)}));I.setEventListeners();const $=new u("#modal-avatar",(function(t){$.setLoading(!0),v.updateAvatar(t.link).then((()=>{n.src=t.link,$.close()})).catch((t=>console.error(`${t}, Failed to update Avatar`))).finally((()=>$.setLoading(!1)))}));$.setEventListeners(),i.addEventListener("click",(()=>{p.profileForm.resetValidation(),y=S.getUserInfo().then((t=>t.json())).then((t=>{r.value=t.name,a.value=t.about})),C.open()})),l.addEventListener("click",(()=>{p.addCardForm.resetValidation(),k.open()})),o.addEventListener("click",(()=>{p.avatarUpdate.resetValidation(),$.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,