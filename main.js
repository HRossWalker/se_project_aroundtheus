!function(){"use strict";var t=class{constructor(t,e,s,i,r){this._name=t.name,this._link=t.link,this._id=t._id,this._likeStatus=t.isLiked,this._cardSelector=e,this._handleImageClick=s,this._handleDeleteClick=i,this._handleLikeDislike=r}_setEventListeners(){this._cardImageElement.addEventListener("click",(()=>this._handleImageClick(this))),this._likeIcon.addEventListener("click",(()=>this._handleLikeDislike(this._likeStatus,this._id))),this._trashIcon.addEventListener("click",(()=>{this._handleDeleteClick(this._id)}))}_handleLikeIcon(){this._likeIcon.classList.toggle("card__like-button_active")}handleDeleteCard(){this._cardElement.remove()}_getTemplate(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement}getView(){return this._element=this._getTemplate(),this._cardTitleElement=this._cardElement.querySelector(".card__title"),this._cardTitleElement.textContent=this._name,this._cardImageElement=this._cardElement.querySelector(".card__image"),this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._likeIcon=this._cardElement.querySelector(".card__like-button"),this._likeStatus&&this._likeIcon.classList.add("card__like-button_active"),this._trashIcon=this._cardElement.querySelector(".card__trash-button"),this._deleteModal=document.querySelector("modal__delete-modal_active"),this._setEventListeners(),this._element}},e=class{constructor(t,e){this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formEl=e,this._inputList=[...this._formEl.querySelectorAll(this._inputSelector)],this._submitButton=this._formEl.querySelector(this._submitButtonSelector)}_setEventListeners(){this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._inputEl=t,this._checkInputValidity(t),this._toggleButtonState()}))}))}_showInputError(){this._errorMessageEl=document.querySelector(`#${this._inputEl.id}-error`),this._errorMessageEl.textContent=this._inputEl.validationMessage,this._inputEl.classList.add(this._inputErrorClass),this._errorMessageEl.classList.add(this._errorClass)}_checkInputValidity(){if(!this._inputEl.validity.valid)return this._showInputError();this._hideInputError()}_hideInputError(){this._errorMessageEl=document.querySelector(`#${this._inputEl.id}-error`),this._errorMessageEl.textContent="",this._inputEl.classList.remove(this._inputErrorClass),this._errorMessageEl.classList.remove(this._errorClass)}_toggleButtonState(){this._hasInvalidInput(this._inputList)?this._enableButton(this._inactiveButtonClass):this._disableButton(this._inactiveButtonClass)}_hasInvalidInput(){return!this._inputList.every((t=>t.validity.valid))}_enableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_disableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}enableValidation(){this._formEl.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputList.forEach((t=>{this._inputEl=t,this._hideInputError()}))}};const s=document.querySelector("#profile-edit-button"),i=document.querySelector("#modal-name-input"),r=document.querySelector("#modal-about-input"),a=document.querySelector(".profile__avatar-edit"),n=document.querySelector("#card-add-button"),o=document.querySelector(".cards__list"),l=document.querySelector("#modal-del-btn");var c=class{constructor(t){let{popupSelector:e}=t;this._modalEl=document.querySelector(e)}open(){this._modalEl.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEsc)}close(){this._modalEl.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEsc)}_handleEsc=t=>{"Escape"===t.key&&this.close()};setEventListeners(){this._modalEl.addEventListener("mousedown",(t=>{t.target.classList.contains("modal_opened")&&this.close(),t.target.classList.contains("modal__close")&&this.close()}))}},h=class extends c{constructor(t,e){super({popupSelector:t}),this._popupForm=this._modalEl.querySelector(".modal__form"),this._submitButton=this._modalEl.querySelector(".modal__save-button"),this._handleFormSubmit=e,this._list=[...this._popupForm.querySelectorAll(".modal__input")]}setSave(){this._submitButton.textContent="Save"}close(){this._popupForm.reset(),super.close()}setLoading(t){t&&(this._submitButton.textContent="Saving...")}_getInputValues(){const t={};return this._list.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){this._popupForm.addEventListener("submit",(()=>{this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}},d=class{constructor(t){this._name=document.querySelector(".profile__name"),this._name.textContent=t.name,this._about=document.querySelector(".profile__about"),this._about.textContent=t.about,this._avatar=document.querySelector(".profile__image"),this._avatar.src=t.avatar}setUserAvatar(t){this._avatar.src=t}setUserInfo(t){let{name:e,about:s}=t;this._name.textContent=e,this._about.textContent=s}},u=class{constructor(t,e){let{data:s,renderer:i}=t;this._items=s,this._renderer=i,this._container=e}renderItems(){this._items.forEach((t=>{this._renderer(t)}))}addItem(t){this._container.prepend(t)}};const _={};let m,p;var E;E={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__button-disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__input-error_visible"},Array.from(document.querySelectorAll(E.formSelector)).forEach((t=>{const s=new e(E,t),i=t.getAttribute("name");_[i]=s,s.enableValidation()}));const v=new class{constructor(t){this._baseUrl=t.baseUrl,this._auth=t.authorization,this._id}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:`${this._auth}`}}).then(this._checkResponse)}getUserData(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:{authorization:`${this._auth}`,"Content-Type":"application/json"}}).then(this._checkResponse)}updateUserData(t){let{name:e,about:s}=t;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:`${this._auth}`,"Content-Type":"application/json"},body:JSON.stringify({name:`${e}`,about:`${s}`})}).then(this._checkResponse)}updateAvatar(t){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:`${this._auth}`,"Content-Type":"application/json"},body:JSON.stringify({avatar:t})}).then(this._checkResponse)}getCards(t){return fetch(`${this._baseUrl}/cards/${t}`,{method:"GET",headers:{authorization:`${this._auth}`}}).then(this._checkResponse)}createCard(t){let{name:e,link:s}=t;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:`${this._auth}`,"Content-Type":"application/json"},body:JSON.stringify({name:`${e}`,link:`${s}`})}).then(this._checkResponse)}deleteCard(t){return fetch(`${this._baseUrl}/cards/${t}`,{method:"DELETE",headers:{authorization:`${this._auth}`,"Content-Type":"application/json"}}).then(this._checkResponse)}likeCard(t){return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:"PUT",headers:{authorization:`${this._auth}`,"Content-Type":"application/json"},body:JSON.stringify({isLiked:!0})}).then(this._checkResponse)}disLikeCard(t){return fetch(`${this._baseUrl}/cards/${t}/likes`,{method:"DELETE",headers:{authorization:`${this._auth}`,"Content-Type":"application/json"}}).then(this._checkResponse)}_checkResponse(t){return t.ok?t.json():Promise.reject(`Error: ${t.status}`)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",authorization:"7dcd9a93-149c-4e56-87db-9285c9177a9e"});v.getUserData().then((t=>{p=new d(t)})).catch((t=>console.error(`${t} Profile info may be incorrect`))),v.getInitialCards().then((t=>{m=new u({data:t,renderer:t=>{const e=b(t);m.addItem(e)}},o),m.renderItems()})).catch((t=>console.error(`${t} Cards may be missing`)));const b=e=>{const s=new t(e,"#card-template",(()=>{S.open(e)}),(()=>{y.open(s)}),((t,e)=>{t?v.disLikeCard(e).then((()=>s._handleLikeIcon())).catch((t=>console.error(`${t}, Failed to dislike card`))):v.likeCard(e).then((()=>s._handleLikeIcon())).catch((t=>console.error(`${t}, Failed to like card`)))}));return s.getView()},S=new class extends c{constructor(t){super({popupSelector:t}),this._popupImage=document.querySelector(".modal__picture-view"),this._popupTitle=document.querySelector(".modal__picture-heading")}open(t){let{name:e,link:s}=t;this._popupImage.src=s,this._popupImage.alt=e,this._popupTitle.textContent=e,super.open()}}("#card-picture-modal");S.setEventListeners();const k=new h("#profile-edit-modal",(function(t){k.setLoading(!0),v.updateUserData(t).then((()=>{p.setUserInfo(t),k.close()})).catch((t=>console.error(`${t}, Failed to update Profile Info`))).finally((()=>{k.setLoading(!1),k.setSave()}))}));k.setEventListeners();const L=new h("#card-add-modal",(function(t){L.setLoading(!0),v.createCard(t).then((t=>{const e=b(t);m.addItem(e),L.close()})).catch((t=>console.error(`${t}, Failed to add Card`))).finally((()=>{L.setLoading(!1),L.setSave()}))}));L.setEventListeners();const y=new class extends c{constructor(t,e){super({popupSelector:t}),this._handleDeleteConfirmation=e}open(t){super.open(),this._cardId=t._id,this._card=t}setEventListeners(){l.addEventListener("click",(()=>{this._handleDeleteConfirmation(this._card,this._cardId)})),super.setEventListeners()}}("#modal-delete",(function(t,e){v.deleteCard(e).then((()=>{t.handleDeleteCard(),y.close()})).catch((t=>console.error(`${t}, Failed to delete card`)))}));y.setEventListeners();const C=new h("#modal-avatar",(function(t){C.setLoading(!0),v.updateAvatar(t.link).then((()=>{p.setUserAvatar(t.link),C.close()})).catch((t=>console.error(`${t}, Failed to update Avatar`))).finally((()=>{C.setLoading(!1),C.setSave()}))}));C.setEventListeners(),s.addEventListener("click",(()=>{_.profileForm.resetValidation(),v.getUserData().then((t=>{i.value=t.name,r.value=t.about,k.open()})).catch((t=>console.error(`${t} Profile data may be incorrect`)))})),n.addEventListener("click",(()=>{_.addCardForm.resetValidation(),L.open()})),a.addEventListener("click",(()=>{_.avatarUpdate.resetValidation(),C.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,